plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'com.globalcitizen'
version = '1.0.0'
sourceCompatibility = '19'
targetCompatibility = '19'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly {
        extendsFrom testAnnotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    
    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    
    // Test Containers
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation 'org.testcontainers:postgresql:1.19.3'
    
    // HTTP Client
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    
    // JSON Processing
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
    
    // QR Code Generation
    testImplementation 'com.google.zxing:core:3.5.2'
    testImplementation 'com.google.zxing:javase:3.5.2'
    
    // JWT
    testImplementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    testRuntimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    testRuntimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    
    // Logging
    testImplementation 'org.slf4j:slf4j-api:2.0.9'
    testImplementation 'ch.qos.logback:logback-classic:1.4.11'
    
    // Assertions
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    
    // Awaitility for async testing
    testImplementation 'org.awaitility:awaitility:4.2.0'
    
    // Lombok
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    // Shared module (if available)
    testImplementation project(':shared')
}

test {
    useJUnitPlatform()
    
    // Test configuration
    systemProperty 'CENTRAL_AUTHORITY_URL', System.getProperty('CENTRAL_AUTHORITY_URL', 'http://localhost:8080')
    systemProperty 'COUNTRY_SERVICE_URL', System.getProperty('COUNTRY_SERVICE_URL', 'http://localhost:8081')
    systemProperty 'EMBASSY_SERVICE_URL', System.getProperty('EMBASSY_SERVICE_URL', 'http://localhost:8082')
    systemProperty 'IMMIGRATION_SERVICE_URL', System.getProperty('IMMIGRATION_SERVICE_URL', 'http://localhost:8083')
    systemProperty 'UI_SERVICE_URL', System.getProperty('UI_SERVICE_URL', 'http://localhost:8084')
    
    // Test timeout
    timeout = Duration.ofMinutes(10)
    
    // Parallel execution
    maxParallelForks = 1 // Run tests sequentially for E2E
    
    // Test reports
    reports {
        html.required = true
        junitXml.required = true
    }
    
    // Test filtering
    filter {
        includeTestsMatching "*Test"
    }
    
    // Test logging
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

// JaCoCo coverage
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

// Test task dependencies
test.finalizedBy jacocoTestReport
test.finalizedBy jacocoTestCoverageVerification

// Custom test tasks
task runCompleteTravelJourneyTest(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "CompleteTravelJourneyTest"
    }
    systemProperty 'CENTRAL_AUTHORITY_URL', System.getProperty('CENTRAL_AUTHORITY_URL', 'http://localhost:8080')
    systemProperty 'COUNTRY_SERVICE_URL', System.getProperty('COUNTRY_SERVICE_URL', 'http://localhost:8081')
    systemProperty 'EMBASSY_SERVICE_URL', System.getProperty('EMBASSY_SERVICE_URL', 'http://localhost:8082')
    systemProperty 'IMMIGRATION_SERVICE_URL', System.getProperty('IMMIGRATION_SERVICE_URL', 'http://localhost:8083')
}

task runMultiCountryVisaTest(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "MultiCountryVisaTest"
    }
    systemProperty 'CENTRAL_AUTHORITY_URL', System.getProperty('CENTRAL_AUTHORITY_URL', 'http://localhost:8080')
    systemProperty 'COUNTRY_SERVICE_URL', System.getProperty('COUNTRY_SERVICE_URL', 'http://localhost:8081')
    systemProperty 'EMBASSY_SERVICE_URL', System.getProperty('EMBASSY_SERVICE_URL', 'http://localhost:8082')
    systemProperty 'IMMIGRATION_SERVICE_URL', System.getProperty('IMMIGRATION_SERVICE_URL', 'http://localhost:8083')
}

task runSecurityVerificationTest(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "SecurityVerificationTest"
    }
    systemProperty 'CENTRAL_AUTHORITY_URL', System.getProperty('CENTRAL_AUTHORITY_URL', 'http://localhost:8080')
    systemProperty 'COUNTRY_SERVICE_URL', System.getProperty('COUNTRY_SERVICE_URL', 'http://localhost:8081')
    systemProperty 'EMBASSY_SERVICE_URL', System.getProperty('EMBASSY_SERVICE_URL', 'http://localhost:8082')
    systemProperty 'IMMIGRATION_SERVICE_URL', System.getProperty('IMMIGRATION_SERVICE_URL', 'http://localhost:8083')
}

// Task descriptions
runCompleteTravelJourneyTest.description = 'Run the complete travel journey end-to-end test'
runMultiCountryVisaTest.description = 'Run the multi-country visa end-to-end test'
runSecurityVerificationTest.description = 'Run the security verification end-to-end test' 